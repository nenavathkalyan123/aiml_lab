week1::

#bfs
graph={
    '1' :['2','3'],
    '2' :['4','5'],
    '3' :['6','7'],
    '4':[],
    '5':[],
    '6':[],
    '7':[]
    }
visited =[]
queue=[]
def bfs(visited,graph,node):
  visited.append(node)
  queue.append(node)
  while queue:
    m=queue.pop(0)
    print(m,end=" ")
    for neighour in graph[m]:
      if neighour not in visited:
        visited.append(neighour)
        queue.append(neighour)
print("bfs nodes are")
bfs(visited,graph,'1')

#dfs
graph={
    '1':['2','3'],
    '2':['4','5'],
    '3':['6','7'],
    '4':[],
    '5':[],
    '6':[],
    '7':[]
}
visited=[]
stack=[]
def dfs(visited,graph,node):
  if node not in visited:
    stack.append(node)
    visited.append(node)
    n=stack.pop(0)
    print(n,end=" ")
    for neighbour in graph[node]:
      dfs(visited,graph,neighbour)
print("dfs nodes are")
dfs(visited,graph,'1')
=================================================================================================================================

week-2
def aStarAlgo(start_node, stop_node):
    open_set = set([start_node])
    closed_set = set()
    g = {}  # Store distance from starting node
    parents = {}  # Store parent relationships
    g[start_node] = 0  # Distance from start to itself is 0
    parents[start_node] = start_node  # Root node points to itself

    while len(open_set) > 0:
        # Find the node with the lowest f(n) = g(n) + h(n)
        n = None
        for v in open_set:
            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v
        if n == stop_node:
            # Reconstruct path from start_node to stop_node
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start_node)
            path.reverse()
            print(f"Path found: {path}")
            return path
        for (m, weight) in get_neighbors(n):
            if m not in open_set and m not in closed_set:
                open_set.add(m)
                parents[m] = n
                g[m] = g[n] + weight
            else:
                if g[m] > g[n] + weight:
                    g[m] = g[n] + weight
                    parents[m] = n
                    if m in closed_set:
                        closed_set.remove(m)
                        open_set.add(m)
        open_set.remove(n)
        closed_set.add(n)
    
    print("Path does not exist!")
    return None

def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    return None

def heuristic(n):
    # Heuristic values (Manhattan or straight-line distance to goal)
    H_dist = {
        'A': 6,
        'B': 4,
        'C': 2,
        'D': 1,
        'E': 0
    }
    return H_dist[n]

# Graph definition
Graph_nodes = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 3)],
    'C': [('D', 1), ('E', 5)],
    'D': [('E', 2)],
}

# Perform A* Search from 'A' to 'E'
aStarAlgo('A', 'E')


====================================================================================================================================
week-3

#travellingSalesmanProblem
from sys import maxsize
from itertools import permutations


V = 4

def travellingSalesmanProblem(graph, s):
    vertex = []
    for i in range(V):
        if i != s:
            vertex.append(i)
    
    min_path = maxsize
    next_permutation = permutations(vertex)
    
    for perm in next_permutation:
        current_pathweight = 0
        
        k = s
        for j in perm:
            current_pathweight += graph[k][j]
            k = j
        current_pathweight += graph[k][s]
        
        min_path = min(min_path, current_pathweight)
    
    return min_path

if __name__ == "__main__":
    graph = [
        [0, 10, 15, 20], 
        [10, 0, 35, 25],
        [15, 35, 0, 30], 
        [20, 25, 30, 0]
    ]
    s = 0  
    print(travellingSalesmanProblem(graph, s))


#graph coloring problems
 colors = ['red', 'blue', 'green', 'yellow', 'black']
 states = ['andhra', 'karnataka', 'tamilnadu', 'kerala']
 neighbors = {
    'andhra': ['karnataka', 'tamilnadu'],
    'karnataka': ['andhra', 'tamilnadu', 'kerala'],
    'tamilnadu': ['andhra', 'karnataka', 'kerala'],
    'kerala': ['karnataka', 'tamilnadu']
 }
 colors_of_states = {}
 def promising(state, color):
    for neighbor in neighbors.get(state):
        color_of_neighbor = colors_of_states.get(neighbor)
        if color_of_neighbor == color:
            return False
    return True
 def get_color_for_state(state):
    for color in colors:
        if promising(state, color):
            return color

 def main():
    for state in states:
        colors_of_states[state] = get_color_for_state(state)
    print(colors_of_states)
 main()

==============================================================================================================================

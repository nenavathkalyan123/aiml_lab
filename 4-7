week-4

 from sympy import symbols, Not, Implies, Xor, And 
rained = symbols('rained') 
visited_hagrid = symbols('visited_hagrid') 
visited_dumbledore = symbols('visited_dumbledore')  
statement1 = Implies(Not(rained), visited_hagrid) 
statement2 = Xor(visited_hagrid, visited_dumbledore)  
statement3 = visited_dumbledore 
combined_formula = And(statement1, statement2, statement3) 
def check_combined_consistency(): 
possible_values = [True, False] 
consistent_scenarios = [] 
for rained_value in possible_values:#true,false 
for visited_hagrid_value in possible_values:
results = { 
rained: rained_value, 
visited_hagrid: visited_hagrid_value,
visited_dumbledore: True 
} 
eval_statement1 = statement1.subs(results)
eval_statement2 = statement2.subs(results) 
eval_statement3 = statement3.subs(results) 

eval_combined_formula = combined_formula.subs(results)
print(f"rained={rained_value}, visited_hagrid={visited_hagrid_value}, 
visited_dumbledore=True") 
print(f"  Statement 1 (¬R → H) evaluates to: {eval_statement1}") 
print(f"  Statement 2 (H ⊕ D) evaluates to: {eval_statement2}") 
print(f"  Statement 3 (D) evaluates to: {eval_statement3}") 
print(f"  Combined Formula evaluates to: {eval_combined_formula}\n") 
if eval_combined_formula: 
consistent_scenarios.append((rained_value, visited_hagrid_value))
return consistent_scenarios 

consistent_scenarios = check_combined_consistency()#t,f 

print("Consistent scenarios based on the combined formula:") 
if consistent_scenarios:
for scenario in consistent_scenarios: 
rained_value, visited_hagrid_value = scenario
print(f"rained={rained_value}, visited_hagrid={visited_hagrid_value}, 
visited_dumbledore=True") 
else: 
print("No consistent scenarios found.") 
print("\nCombined logical formula:") 
print(combined_formula) 

==========================================================================

week-5

 from itertools import product
 p_burglary = 0.002
 p_earthquake = 0.001
 p_alarm_given_burglary_and_earthquake = 0.94
 p_alarm_given_burglary_and_no_earthquake = 0.95
 p_alarm_given_no_burglary_and_earthquake = 0.31
 p_alarm_given_no_burglary_and_no_earthquake = 0.001
 p_david_calls_given_alarm = 0.91
 p_david_does_not_call_given_alarm = 0.09
 p_david_calls_given_no_alarm = 0.05
 p_david_does_not_call_given_no_alarm = 0.95
 p_sophia_calls_given_alarm = 0.75
 p_sophia_does_not_call_given_alarm = 0.25
 p_sophia_calls_given_no_alarm = 0.02
 p_sophia_does_not_call_given_no_alarm = 0.98
 def joint_probability(alarm,burglary,earthquake,david_calls,sophia_calls):
    if alarm:
      if burglary and earthquake:
        p_alarm = p_alarm_given_burglary_and_earthquake
      elif burglary and not earthquake:
         p_alarm = p_alarm_given_burglary_and_no_earthquake
      elif not burglary and  earthquake:
        p_alarm = p_alarm_given_no_burglary_and_earthquake
      else:
         p_alarm = p_alarm_given_no_burglary_and_no_earthquake
    else:
        if burglary and earthquake:
            p_alarm = 1 -  p_alarm_given_burglary_and_earthquake
        elif burglary:
            p_alarm =  1 -  p_alarm_given_burglary_and_no_earthquake
        elif earthquake:
            p_alarm = 1 -  p_alarm_given_no_burglary_and_earthquake
        else:
            p_alarm = 1 -  p_alarm_given_no_burglary_and_no_earthquake
    p_david = (p_david_calls_given_alarm if david_calls else p_david_does_not_call_given_no_alarm)
    p_sophia= (p_sophia_calls_given_alarm if sophia_calls else p_sophia_does_not_call_given_no_alarm)
    return (p_burglary if burglary else 1 - p_burglary) * (p_earthquake if earthquake else 1 - p_earthquake)*p_alarm*p_david*p_sophia
 result = joint_probability(
    alarm = True,
    burglary=False,
    earthquake=False,
    david_calls=True,
    sophia_calls=True
 )
 print(f"The probanility that the alarm has sounded,there is neither a burglary nor earthquake,and both david and sophia called marry is:{result:.8f}")

===========================================================================
week-6

 import numpy as np
 class HMM:
    def __init__(self,states,observations):
         self.states=states
         self.n_states=len(states)
         self.n_obs=len(observations)
         self.State_index={state:i for i,state in enumerate(states)}
         self.obs_index={obs:i for i,obs in enumerate(observations)}
         self.A=np.array([
             [0.6,0.3,0.1],
             [0.2,0.5,0.3],
             [0.1,0.4,0.5]
         ])
         self.B=np.array([
             [0.8,0.15,0.05],
             [0.3,0.4,0.3],
             [0.1,0.2,0.7]
       ])
         self.pi=np.array([0.5,0.3,0.2])
    def forward(self,obs_seq):
         n=len(obs_seq)
         alpha=np.zeros((n,self.n_states))
         alpha[0]=self.pi * self.B[:,obs_seq[0]]
         for t in range(1,n):
             for j in range(self.n_states):
                 alpha[t,j]=(alpha[t-1] @ self.A[:,j]) * self.B[j, obs_seq[t]]
         return alpha.sum(axis=1)[-1]
 states=['Sunny','Cloudy','Rainy']
 observations=['Umbrella','Normal','Raincoat']
 hmm=HMM(states, observations)
 obs_seq=['Umbrella','Normal','Umbrella','Raincoat']
 obs_seq_indices=[hmm.obs_index[obs] for obs in obs_seq]
 prob=hmm.forward(obs_seq_indices)
 print(f"Probability of the observation sequence'{obs_seq}':{prob:.4f}")

==============================================================================
week-7

  import numpy as np 
 import pandas as pd 
 import matplotlib.pyplot as plt 
 #from google.colab import files 
 #uploaded = files.upload() 
 dataset = pd.read_csv('pizza.csv') 
 X = dataset.iloc[:, 0:-1].values #independent variable array 
 y = dataset.iloc[:,1].values #dependent variable vector 
 # splitting the dataset 
 from sklearn.model_selection import train_test_split 
 X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=1/3,random_state=0) 
 # fitting the regression model 
 from sklearn.linear_model import LinearRegression 
 regressor = LinearRegression() 
 regressor.fit(X_train,y_train) #actually produces the linear eqn for the data 
 regressor 
 # predicting the test set results 
 y_pred = regressor.predict(X_test) 
 #comparing both y_test and y_pred 
 df1=pd.DataFrame({'Actual':y_test,'Prediction':y_pred}) 
 df1 
 # visualizing the results 
 #plot for the TRAIN 
 plt.scatter(X_train, y_train, color='red') # plotting the observation line 
 plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line 
 plt.title("size vs cost  (Training set)") # stating the title of the graph 
 plt.xlabel("size") # adding the name of x-axis 
 plt.ylabel("cost") # adding the name of y-axis 
 plt.show() # specifies end of graph 
 #plot for the TEST 
 plt.scatter(X_test, y_test, color='red') 
 plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line 
 plt.title("size vs cost  (Training set)") # stating the title of the graph 
 plt.xlabel("size") # adding the name of x-axis 
 plt.ylabel("cost") # adding the name of y-axis 
 plt.show() 
 dataset.head()
